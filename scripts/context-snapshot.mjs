#!/usr/bin/env node
/**
 * Generate a lightweight repository snapshot for agents:
 * - File tree (excluding common noise)
 * - Key config files (package.json, tsconfig.json, jest.config.js, typedoc.json)
 * - Environment template keys (env.example)
 * Output: docs/context/snapshot.md
 */
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const repoRoot = path.resolve(__dirname, '..');

const OUTPUT_DIR = path.join(repoRoot, 'docs', 'context');
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'snapshot.md');

const IGNORE_DIRS = new Set([
  '.git',
  'node_modules',
  'dist',
  'build',
  'coverage',
  '.next',
  '.turbo',
  '.vercel',
  '.cache',
  '.idea',
  '.vscode'
]);

const MAX_FILE_SIZE = 128 * 1024; // 128KB cutoff when inlining

function walk(dir, prefix = '') {
  const entries = fs
    .readdirSync(dir, { withFileTypes: true })
    .filter((d) => !IGNORE_DIRS.has(d.name));
  const lines = [];
  for (const entry of entries) {
    const full = path.join(dir, entry.name);
    if (entry.isDirectory()) {
      lines.push(`${prefix}📁 ${entry.name}`);
      lines.push(...walk(full, prefix + '  '));
    } else {
      lines.push(`${prefix}📄 ${entry.name}`);
    }
  }
  return lines;
}

function readIfExists(filePath) {
  try {
    if (!fs.existsSync(filePath)) return null;
    const stat = fs.statSync(filePath);
    if (stat.size > MAX_FILE_SIZE) {
      return `File too large to inline (${stat.size} bytes).`;
    }
    return fs.readFileSync(filePath, 'utf8');
  } catch {
    return null;
  }
}

function collectEnvKeys(envExamplePath) {
  const content = readIfExists(envExamplePath);
  if (!content) return [];
  return content
    .split('\n')
    .map((l) => l.trim())
    .filter((l) => l && !l.startsWith('#'))
    .map((l) => l.split('=')[0].trim())
    .filter(Boolean);
}

function main() {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });

  const treeLines = walk(repoRoot);
  const packageJson = readIfExists(path.join(repoRoot, 'package.json'));
  const tsconfig = readIfExists(path.join(repoRoot, 'tsconfig.json'));
  const jestConfig = readIfExists(path.join(repoRoot, 'jest.config.js'));
  const typedoc = readIfExists(path.join(repoRoot, 'typedoc.json'));
  const envKeys = collectEnvKeys(path.join(repoRoot, 'env.example'));

  const md = [
    '# Repository Snapshot',
    '',
    '## File Tree',
    '```',
    ...treeLines,
    '```',
    '',
    '## Key Config Files',
    '### package.json',
    '```json',
    packageJson ?? '{}',
    '```',
    '',
    '### tsconfig.json',
    '```json',
    tsconfig ?? '{}',
    '```',
    '',
    '### jest.config.js',
    '```javascript',
    jestConfig ?? '// not found',
    '```',
    '',
    '### typedoc.json',
    '```json',
    typedoc ?? '{}',
    '```',
    '',
    '## Environment Variables (from env.example)',
    envKeys.length ? envKeys.map((k) => `- ${k}`).join('\n') : '_No env.example found or it contains no keys._',
    '',
    '> This file is auto-generated by scripts/context-snapshot.mjs'
  ].join('\n');

  fs.writeFileSync(OUTPUT_FILE, md, 'utf8');
  console.log(`Wrote ${path.relative(repoRoot, OUTPUT_FILE)}`);
}

main();